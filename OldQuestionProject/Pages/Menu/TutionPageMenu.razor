@page "/Menu"
@inject AppDBContext _dbMenu
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
<style>
    body {
        background-image: url('');
        background-size: cover;
        background-color: azure;
    }
</style>
<div class="container">
    <div class="row">
        <div class="col-md-3">
            <div class="sidebar">
                <NavMenu />
            </div>
        </div>

        <div class="col-md-9">
            <div class="container">
                <div class="row">
                    <div class="d-flex flex-column flex-md-row">
                        <div>
                            <label for="Grade">Grade</label>
                            <select class="form-select form-select-sm sm-3" aria-label="small select example" id="GradeDDL" style="width:150px;" @bind="SelectedGrade">
                                @if (GradeLs is not null)
                                {
                                    @foreach (var item in GradeLs)
                                    {
                                        <option value=@item.Item>@item.Descr</option>

                                    }
                                }
                            </select>
                        </div>
                        &nbsp;&nbsp;
                        <div>
                            <label for="Subject">Subject</label>
                            <select class="form-select form-select-sm sm-3" aria-label="small select example" id="SubjectDDL" style="width:150px;" @bind="SelectedSubject">
                                @if (SubjectLs is not null)
                                {
                                    @foreach (var Subitem in SubjectLs)
                                    {
                                        <option value=@Subitem.Item>@Subitem.Descr</option>
                                    }
                                }
                            </select>
                        </div>
                        &nbsp;&nbsp;
                        <div>
                            <label for="Type">Type</label>
                            <select class="form-select form-select-sm sm-3" aria-label="small select example" id="TypeDDL" style="width:150px;" @bind="SelectedType">

                                @if (TypeLs is not null)
                                {
                                    @foreach (var Typeitem in TypeLs)
                                    {
                                        <option value=@Typeitem.Item>@Typeitem.Descr</option>
                                    }
                                }
                            </select>
                        </div>
                        <br />
                        <div>
                            <br />
                            <br /><br />
                            &nbsp;&nbsp;<button type="button" class="btn btn-secondary" @onclick="Search">Search</button>
                        </div>

                    </div>
                </div>
            </div>
            <br />
            @if (OQ is not null)
            {
                int count = 0;
                @foreach (var item in OQ)
                {
                    int labelcount = count+1;
                    <div>
                        <label for="Question">@(++count). @item.Question </label><br />&nbsp; &nbsp;
                        
                        <label for="A">A</label> &nbsp; &nbsp;
                        <label for="AA">@item.Usrdef01</label> &nbsp; &nbsp;
                        <label for="B">B</label> &nbsp; &nbsp;
                        <label for="BA">@item.Usrdef02</label> &nbsp; &nbsp;
                        <label for="C">C</label> &nbsp; &nbsp;
                        <label for="CA">@item.Usrdef03</label> &nbsp; &nbsp;
                        <label for="D">D</label> &nbsp; &nbsp;
                        <label for="DA">@item.Usrdef04</label><br />

                        <input type="checkbox" checked="@isChecked" @onchange="()=>CheckboxChanged(labelcount)" />
                        <label>Show Result: </label>
                        <label name="@($"input{count}")" style="@(ShouldShowLabel($"input{count}") ? "display: block;" : "display: none;")">The result is: Your Result @(++count)</label>
                    </div>
                }
            }

        </div>
    </div>
</div>


@code {
    private string? SelectedGrade { get; set; }

    private string? SelectedSubject { get; set; }
    private string? SelectedType { get; set; }
    private bool isChecked = false;
    private bool? Checked;
    private bool Fir = false;
    private string? LblCount;
    private bool isVisible = false;
    List<ListdetlModel>? GradeLs;
    List<ListdetlModel>? TypeLs;
    List<ListdetlModel>? SubjectLs;
    List<OQHeadModel>? OQ;

    protected override async Task OnInitializedAsync()
    {
        await List();

    }

    public async Task List()
    {
        GradeLs = await _dbMenu.List.Where(x => x.Code == "Grade").ToListAsync();
        TypeLs = await _dbMenu.List.Where(x => x.Code == "Type").ToListAsync();
        SubjectLs = await _dbMenu.List.Where(x => x.Code == "Subject").ToListAsync();
        // Initialize OQ to an empty list
        OQ = new List<OQHeadModel>();
    }

    public async Task Search()
    {
        // Your logic to fetch OQ based on selected options
        OQ = await _dbMenu.OQ.Where(x => x.Grade == SelectedGrade && x.Subject == SelectedSubject && x.Type == SelectedType).ToListAsync();
    }

    private void CheckboxChanged(int Count)
    {
        string LabelName = "input" + Count;
        ShouldShowLabel(LabelName);
    }

    private bool ShouldShowLabel(string labelName)
    {

        return labelName == "input1";
    }

}


